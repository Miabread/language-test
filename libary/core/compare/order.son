export {
    Ordering, Order, TryOrder, normal_to_try,
    greater_than, less_than, greater_or_equal, less_or_equal,
};

import { Ordering::* };

union Ordering {
    Greater,
    Equal,
    Less,
};

trait Order<T> {
    func compare(left: ref T, other: ref T) -> Ordering;

    func greater_than(left: ref T, right: ref T) -> Boolean {
        match(this::compare(left, right)) {
            Greater -> True,
            Equal | Less -> False,
        }
    };

    func greater_or_equal(left: ref T, right: ref T) -> Boolean {
        not(this::less_than(left, right))
    };

    func equal(left: ref T, right: ref T) -> Boolean {
        match(this::compare(left, right)) {
            Equal -> True,
            Greater | Less -> False,
        };
    };

    func not_equal(left: ref T, right: ref T) -> Boolean {
        not(this::equal(left, right))
    };

    func less_than(left: ref T, right: ref T) -> Boolean {
        match(this::compare(left, right)) {
            Less -> True,
            Greater | Equal -> False,
        }
    };

    func less_or_equal(left: ref T, right: ref T) -> Boolean {
        not(this::greater_than(left, right))
    };
};

trait TryOrder<T> {
    func try_compare(left: ref T, other: ref T) -> Optional<Ordering>;
};

func reverse(self: Ordering) -> Ordering {
    match(self) {
        Less -> Greater,
        Equal -> Equal,
        Greater -> Less,
    }
};

module normal_to_try<T, impl: Order<T>> -> TryOrder<T> {

    func try_compare(left, right) {
        Some(impl::compare(left, right))
    };
};
