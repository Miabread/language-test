======
Import
======

import { foo, bar::baz };

---

(source_file
    (import_item
        (compound_path
            (identifier))
        (compound_path
            (identifier)
            (compound_path
                (identifier)))))

==============
Complex Import
==============

import {
    sonance::core::{
        primitive::boolean::{Boolean, default as bool_default},
        identity::default<Boolean, bool_default>::default,
    },
};

---

(source_file
    (import_item
        (compound_path
            (identifier)
            (compound_path
                (identifier)
                (compound_path
                    (identifier)
                    (compound_path
                        (identifier)
                        (compound_path
                            (identifier))
                        (compound_path
                            (identifier)
                            (identifier))))
                (compound_path
                    (identifier)
                    (compound_path
                        (identifier)
                        args: (generic_argument_list
                            (simple_path
                                (identifier))
                            (simple_path
                                (identifier)))
                        (compound_path
                            (identifier))))))))

======
Export
======

export { foo, bar::baz };

---

(source_file
    (export_item
        (simple_path
            (identifier))
        (simple_path
            (identifier)
            (simple_path
                (identifier)))))

==============
Complex Export
==============

export {
    foo<wew::lad>::bar,
};

---

(source_file
    (export_item
        (simple_path
            (identifier)
            args: (generic_argument_list
                (simple_path
                    (identifier)
                    (simple_path
                        (identifier))))
            (simple_path
                (identifier)))))

======
Struct
======

struct Chair<M: Material>(
    Color,
    design: Design,
    material: M,
);

---

(source_file
    (struct_item
        name: (identifier)
        generics: (generic_parameter_list
            (generic_parameter
                name: (identifier)
                bounds: (simple_path
                    (identifier))))
        parameters: (struct_parameter_list
            (struct_parameter
                type: (simple_path
                    (identifier)))
            (struct_parameter
                name: (identifier)
                type: (simple_path
                    (identifier)))
            (struct_parameter
                name: (identifier)
                type: (simple_path
                    (identifier))))))

=====
Union
=====

union Address {
    Kind1(first: I32, second: I32),
    Kind2(String),
    Kind3,
};

---

(source_file
    (union_item
        name: (identifier)
        variants: (union_variant_list
            (union_variant
                name: (identifier)
                parameters: (struct_parameter_list
                    (struct_parameter
                        name: (identifier)
                        type: (simple_path
                            (identifier)))
                    (struct_parameter
                        name: (identifier)
                        type: (simple_path
                            (identifier)))))
            (union_variant
                name: (identifier)
                parameters: (struct_parameter_list
                        (struct_parameter
                            type: (simple_path
                                (identifier)))))
            (union_variant
                name: (identifier)))))

=============
Simple Module
=============

module foo {
    func bar() {};
};

---

(source_file
    (module_item
        name: (identifier)
        (function_item
            name: (identifier)
            parameters: (func_parameter_list)
            body: (block))))

==============
Complex Module
==============

module foo<Self> -> Foo {
    func bar() -> Self {};
};

---

(source_file
    (module_item
        name: (identifier)
        generics: (generic_parameter_list
            (generic_parameter
                name: (identifier)))
        return_type: (simple_path
            (identifier))
        (function_item
            name: (identifier)
            parameters: (func_parameter_list)
            return_type: (simple_path
                (identifier))
            body: (block))))
