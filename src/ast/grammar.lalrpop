use crate::ast::data::*;

grammar;

match {
    "(", ")", "{", "}", ".", ",", ";", "=",
    "enum", "func", "let", "in",
    r"[a-zA-Z][a-zA-Z0-9_]*" => IDENTIFIER,
}

#[inline]
Boxed<T>: Box<T> = T => Box::new(<>);

#[inline]
List<T, S>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Identifier: String = IDENTIFIER => <>.to_owned();

pub File: File = <items: List<Item, ";">> => File { <> };

Item: Item = {
    EnumItem => <>.into(),
    FuncItem => <>.into(),
};

EnumItem: EnumItem = "enum" <name: Identifier> "(" <variants: List<Identifier, ",">> ")" => EnumItem { <> };

FuncItem: FuncItem = "func" <name: Identifier> "(" ")" "{" <body: Expr> "}" => FuncItem { <> };

Expr: Expr = {
    Identifier => Expr::Variable(<>),
    EnumLiteral => <>.into(),
    LetExpr => <>.into(),
};

EnumLiteral: EnumLiteral = <name: Identifier> "." <variant: Identifier> => EnumLiteral { <> };

LetExpr: LetExpr = "let" <name: Identifier> "=" <expr: Expr> "in" <body: Expr> => LetExpr { <> };
