export { From, Into, reflective, reciprocal };

trait From<Self, T> {
    func from(other: T) -> Self;
};

trait Into<Self, T> {
    func into(self: Self) -> T;
};

// Reflective property
module reflective<Self, T> -> From<Self, T> {
    func from(other) {
        other
    };
};

// Reciprocal property
module reciprocal<Self, T, impl: From<T, Self>> -> Into<Self, T>  {
    func into(self) {
        impl::from(self)
    };
};
