export { Default, Pointed, Functor, Monad };

trait Default<T> {

    func default() -> T;
};

trait Pointed<P<?>> {

    func of<T>(value: T) -> P<T>;
};

trait Functor<F<?>> {

    func map<T, R>(self: F<T>, fn: func(T) -> R) -> F<R>;
};

trait Monad<M<?>> {

    func flat_map<T, R>(self: M<T>, fn: func(T) -> M<R>) -> M<R>;
};

trait Monoid<T, impl: Default<T>> {

    func combine(left: T, right: T) -> T;
};
