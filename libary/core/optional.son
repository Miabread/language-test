export { Optional, Some, Nothing };

import {
    super::boolean::{Boolean, True, False},
    Optional::*,
};

union Optional<T> {
    Some(T),
    Nothing,
};

module default_some<T, impl: Default<T>> -> Default<Optional<T>> {
    func default() {
        Some(impl::default())
    };
};

module default_nothing<T> -> Default<Optional<T>> {
    func default() {
        Nothing
    };
};

module pointed_some -> Pointed<Optional<?>> {
    func of(value) {
        Some(value)
    };
};

module pointed_nothing -> Pointed<Optional<?>> {
    func of(_) {
        Nothing
    };
};

module functor -> Functor<Optional<?>> {
    func map(self, fn) {
        match(self) {
            Some(value) -> Some(fn(value)),
            Nothing -> Nothing,
        }
    };
};

module monad -> Monad<Optional<?>> {
    func flat_map(self, fn) {
        match(self) {
            Some(value) -> fn(value),
            Nothing -> Nothing,
        }
    };
};

func if<R>(condition: Boolean, body: func() -> R) -> Optional<R> {
    match(condition) {
        True -> Some(body()),
        False -> Nothing,
    }
};

func else<R>(self: Optional<R>, body: func() -> R) -> R {
    match(self) {
        Some(value) -> value,
        Nothing -> body(),
    }
};

func else_if<R>(self: Optional<R>, condition: func() -> Boolean, body: func() -> R) -> Optional<R> {
    self else {
        if(condition(), body)
    }
};
