export { order_equal, try_order_equal };

import export {
    equal::{ Equal, TryEqual, equal, not_equal },
    order::{
        Order, TryOrder, Ordering,
        greater_than, less_than,
        greater_or_equal, less_or_equal,
    },
};

import {
    Ordering::*,
};

module order_equal<T, impl: Order<T>> -> Equal<T> {

    func equal(left, right) {
        impl::equal(left, right)
    };

    func not_equal(left, right) {
        impl::not_equal(left, right)
    };
};

module try_order_equal<T, impl: TryOrder<T>> -> TryEqual<T> {

    func try_equal(left, right) {
        match(impl::try_compare(left, right)) {

            Some(Equal) -> Some(True),
            Some(Greater | Less) -> Some(False),
            Nothing -> Nothing,
        }
    };
};
