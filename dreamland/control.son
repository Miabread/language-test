export { Boolean, Boolean::*, if, when, guard }

union Boolean(True, False);

/*
 *  if(equal(x, 111), func() { 222 }, else: func() { 333 });
 *
 *  if(equal(x, 111)) {
 *      222
 *  } else {
 *      333
 *  }
 */
func if<R>(
    condition: Boolean,
    when_true: func() -> R,
    else when_false: func() -> R,
) -> R {
    match(condition) {
        Boolean::True -> when_true(),
        Boolean::False -> when_false(),
    }
}

/*
 *  when(equal(x, 111), func() { print("222"); });
 *
 *  when(equal(x, 111)) {
 *      print("222");
 *  }
 */
func when(
    condition: Boolean,
    when_true: func() -> Unit,
) -> Unit {
    if(condition) { when_true() } else {}
}

/*
 *  guard(equal(x, 111), else: func() { return 222; });
 *
 *  guard(equal(x, 111)) else {
 *      return 222;
 *  }
 */
func guard(
    condition: Boolean,
    else when_false: func() -> Never,
) -> Never {
    if(condition) {} else { when_false() }
}
